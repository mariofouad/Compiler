int factorial(int n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

float compute(float x, int y) {
    float result = 0.0;
    
    if (y <= 0) {
        return x;
    } else {
        return x * compute(x, y - 1);
    }
}

void printValue() {
    return;
}

int functionWithoutReturn(int x) {
    int y = x + 5;
    if (x > 10) {
        return y;
    }
}

int main() {
    const int MAX = 10;
    int i = 0;
    float sum = 0.0;
    
    while (i < MAX) {
        int j = 0;
        
        do {
            if (j % 2 == 0) {
                sum = sum + factorial(j);
            } else {
                sum = sum + compute(j * 0.5, 2);
            }
            j = j + 1;
        } while (j < i);
        
        i = i + 1;
    }
    
    for (int k = 0; k < 5; k = k + 1) {
        switch (k) {
            case 0: sum = sum + 10; break;
            case 1: sum = sum * 2; break;
            case 2: continue;
            case 3: sum = sum / 2; break;
            default: break;
        }
    }
    
    int uninitializedVar;
    sum = sum + uninitializedVar;
    
    const int IMMUTABLE = 50;
    IMMUTABLE = 100;
    
    if (sum > 100 && sum < 200 || sum == 150) {
        return 1;
    } else {
        float wrongType = "This is a string";
        return 0;
    }
}

float missingReturn() {
    int x = 10;
    if (x > 5) {
        return 3.14;
    }
}

void testBreak() {
    break;
}

void testContinue() {
    continue;
}

int recursiveFunction(int depth) {
    if (depth <= 0) {
        return 1;
    }
    return recursiveFunction(depth - 1) + recursiveFunction(depth - 2);
}